package br.com.algartelecom.service;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.time.LocalDateTime;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

import br.com.algartelecom.model.Conta;
import br.com.algartelecom.model.StatusConta;
import br.com.algartelecom.model.TipoConta;
import br.com.algartelecom.model.Transacao;
import br.com.algartelecom.repository.ContaRepository;
import br.com.algartelecom.repository.TransacaoRepository;

class TransacaoServiceTest {

	private TransacaoService service;

	@Mock
	private ContaRepository contaRepository;

	@Mock
	private TransacaoRepository transacaoRepository;

	// estudar anotacao
	@BeforeEach
	public void beforeEach() {
		MockitoAnnotations.openMocks(this);
		this.service = new TransacaoService(contaRepository, transacaoRepository);
	}

//	@Test
//	void deveriaDepositarValorNaConta() throws Exception {
//		// declarativo
//		String numConta = "1";
//		Transacao trans = new Transacao(1L, numConta, 50.0, null, null, null);
//		Conta conta = new Conta(1L, "TESTE", "10045-3", TipoConta.CONTA_CORRENTE, 100.0, StatusConta.ATIVO);
//
//		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
//
//		// execucao
//		Conta contaDepoisExecucao = service.depositar(trans, numConta);
//
//		// comparacao
//		assertEquals(conta.getNumConta(), contaDepoisExecucao.getNumConta());
//	}
//
//	@Test
//	void deveriaDarErroAoDepositarValorNaContaPeloStatusConta() throws Exception {
//		// declarativo
//		String numConta = "1";
//		Transacao trans = new Transacao(1L, numConta, 50.0, null, null, null);
//		Conta conta = new Conta(1L, null, "10045-3", null, 100.0, StatusConta.INATIVO);
//
//		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
//
//		// execucao
//		Conta contaDepoisExecucao = service.depositar(trans, numConta);
//
//		// comparacao
//		assertEquals(null, contaDepoisExecucao);
//	}
//
//	@Test
//	void deveriaDarErroAoDepositarValorNaContaPeloValorTransacao() {
//		// declarativo
//		String numConta = "1";
//		Transacao trans = new Transacao(1L, numConta, -50.0, null, null, null);
//		Conta conta = new Conta(1L, null, "10045-3", null, 100.0, StatusConta.ATIVO);
//
//		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
//
//		Assertions.assertThrows(Exception.class, () -> service.depositar(trans, numConta));
//
//	}
	
//	@Test
//	void deveriaSacarValorDaConta () throws Exception{
//		String numConta = "1";
//		Transacao trans = new Transacao(1L, numConta, 50.0, null, null, numConta);
//		Conta conta = new Conta(1L, "TESTE", "10045-3", null, 100.0, StatusConta.ATIVO);
//		
//		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
//		
//		Conta contaDepoisExecucao = service.depositar(trans, numConta);
//		
//		assertEquals(conta.getNumConta(), contaDepoisExecucao.getNumConta());
//	}
	
//	@Test 
//	void deveriaMostrarSaldo () throws Exception {
//		//declarativo
//		String numConta = "1";
//		Transacao trans = new Transacao(1L, numConta, 100.0, LocalDateTime.now(), null, numConta);
//		Conta conta = new Conta(1L, "TESTE", "10045-3", TipoConta.CONTA_CORRENTE, 100.0, StatusConta.ATIVO);
//		
//		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
//		
//		//execucao
//		Conta contaDepoisExecucao = service.depositar(trans, numConta);
//		
//		//comparacao
//		assertEquals(conta.getNumConta(), contaDepoisExecucao.getNumConta());
//		
//	}
	
	@Test
	void deveriaDarErroAoMostrarSaldoPeloStatusDaConta() throws Exception {
		String numConta = "1";
		Transacao trans = new Transacao(1L, numConta, null, null, null, null);
		Conta conta = new Conta(1L, null, numConta, TipoConta.CONTA_CORRENTE, null, StatusConta.INATIVO);
		
		Mockito.when(contaRepository.findByNumConta(numConta)).thenReturn(conta);
		
		Conta contaDepoisExecucao = service.depositar(trans, numConta);
		
		assertEquals(null, contaDepoisExecucao);
	}
	
}
