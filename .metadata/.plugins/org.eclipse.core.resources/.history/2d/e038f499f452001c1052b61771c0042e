package br.com.algartelecom.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.algartelecom.model.Conta;
import br.com.algartelecom.model.StatusConta;
import br.com.algartelecom.model.Transacao;
import br.com.algartelecom.repository.ContaRepository;
import br.com.algartelecom.repository.TransacaoRepository;

@Service
public class TransacaoService {

	@Autowired
	private ContaRepository contaRepository;

	@Autowired
	private TransacaoRepository transacaoRepository;

	public Conta depositar(Transacao transacaoDeposito, String numConta) {
		Conta conta = contaRepository.findByNumConta(numConta);
		// if (transacaoDeposito.getValorTransacao() < 0) {
		// throw new Exception();
		// }
		Double novoValor = somar(transacaoDeposito.getValorTransacao(), conta.getSaldo());
		if (conta.getStatus() == StatusConta.ATIVO) {
			conta.setSaldo(novoValor);
			// Pq salvar transacao no Repository ?
			transacaoRepository.save(transacaoDeposito);
			contaRepository.save(conta);
			return conta;
		}
		return null;

	}

	public Conta sacar(Transacao transacaoSaque, String numConta) {
		Conta conta = contaRepository.findByNumConta(numConta);
		// if (contaRepository.findByNumConta(numConta).getSaldo() < 0) {
		// throw new Exception();
		// }

		Double novoValor = subtrair(conta.getSaldo(), transacaoSaque.getValorTransacao());
		if (conta.getStatus() == StatusConta.ATIVO) {
			conta.setSaldo(novoValor);
			transacaoRepository.save(transacaoSaque);
			contaRepository.save(conta);
			return conta;
		}

		return null;

	}

//	public Conta transferir(Transacao transacaoTransferencia, String numConta) {
//		Conta contaOrigem = contaRepository.findByNumConta(numConta);
//		Conta contaDestino = contaRepository.findByNumConta(numConta);
//		
//		if(contaOrigem == contaDestino) {
//			return null;
//		}
//		if(contaOrigem == contaDestino)
//		
//		
//	}
	
	private Double verificaSaldo(Transacao transacaoSaldo, String numConta) {
		Double conta = contaRepository.findByNumConta(numConta).getSaldo();
		if(conta != null) {
			return conta;
			
			
		}
		return null;
		
	}

	private Double somar(Double valorTransacao, Double saldo) {
		return valorTransacao + saldo;
	}

	private Double subtrair(Double valorTransacao, Double saldo) {
		return valorTransacao - saldo;

	}
}
